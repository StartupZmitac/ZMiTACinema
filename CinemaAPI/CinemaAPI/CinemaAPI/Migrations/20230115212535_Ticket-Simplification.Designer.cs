// <auto-generated />
using System;
using CinemaAPI.Controllers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaAPI.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20230115212535_Ticket-Simplification")]
    partial class TicketSimplification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaAPI.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CinemaAPI.Models.Cashier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("CinemaAPI.Models.Film", b =>
                {
                    b.Property<Guid>("Id_Film")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dubbing")
                        .HasColumnType("bit");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is3D")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sub")
                        .HasColumnType("bit");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id_Film");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("CinemaAPI.Models.Location", b =>
                {
                    b.Property<Guid>("id_location")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_location");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CinemaAPI.Models.Room", b =>
                {
                    b.Property<Guid>("id_room")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("column")
                        .HasColumnType("int");

                    b.Property<Guid?>("id_location")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("room_number")
                        .HasColumnType("int");

                    b.Property<int>("row")
                        .HasColumnType("int");

                    b.Property<string>("taken_seats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unavailable_seats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_room");

                    b.HasIndex("id_location");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("CinemaAPI.Models.Screening", b =>
                {
                    b.Property<Guid>("Screening_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Film")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Id_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("id_room")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Screening_ID");

                    b.HasIndex("Id_Film");

                    b.HasIndex("id_room");

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("CinemaAPI.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Screening_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Seat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Screening_ID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CinemaAPI.Models.Room", b =>
                {
                    b.HasOne("CinemaAPI.Models.Location", "_location")
                        .WithMany("rooms")
                        .HasForeignKey("id_location");

                    b.Navigation("_location");
                });

            modelBuilder.Entity("CinemaAPI.Models.Screening", b =>
                {
                    b.HasOne("CinemaAPI.Models.Film", "_film")
                        .WithMany("Screenings")
                        .HasForeignKey("Id_Film");

                    b.HasOne("CinemaAPI.Models.Room", "_room")
                        .WithMany("Screenings")
                        .HasForeignKey("id_room");

                    b.Navigation("_film");

                    b.Navigation("_room");
                });

            modelBuilder.Entity("CinemaAPI.Models.Ticket", b =>
                {
                    b.HasOne("CinemaAPI.Models.Screening", "_screening")
                        .WithMany("tickets")
                        .HasForeignKey("Screening_ID");

                    b.Navigation("_screening");
                });

            modelBuilder.Entity("CinemaAPI.Models.Film", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CinemaAPI.Models.Location", b =>
                {
                    b.Navigation("rooms");
                });

            modelBuilder.Entity("CinemaAPI.Models.Room", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CinemaAPI.Models.Screening", b =>
                {
                    b.Navigation("tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
